// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
namespace ASC.Mail.Core.Dao.Entities;

public static class Tables
{
    public const string Mail = "mail_mail";
    public const string Contact = "mail_contacts";
    public const string ContactInfo = "mail_contact_info";
    public const string Tag = "mail_tag_mail";
    public const string UserFolder = "mail_user_folder_x_mail";

}

[Transient]
[ElasticsearchType(RelationName = Tables.Mail)]
public partial class MailMail : BaseEntity, ISearchItemDocument
{
    [Nest.PropertyName("id")]
    public int Id { get; set; }

    [Nest.PropertyName("tenantId")]
    public int TenantId { get; set; }

    [Nest.PropertyName("lastModifiedOn")]
    public DateTime LastModifiedOn { get; set; }

    public string FromText { get; set; }

    public string ToText { get; set; }

    public string Cc { get; set; }

    public string Bcc { get; set; }

    public string Subject { get; set; }

    public string UserId { get; set; } 

    public DateTime DateSent { get; set; }

    public int Folder { get; set; }

    public string ChainId { get; set; }

    public DateTime ChainDate { get; set; }

    public int MailboxId { get; set; }

    public bool IsRemoved { get; set; }

    public bool Unread { get; set; }

    public bool Importance { get; set; }

    public bool HasAttachments { get; set; }

    [Nested]
    public List<MailUserFolderXMail> UserFolders { get; set; }

    public bool WithCalendar { get; set; }

    [Nested]
    public List<MailTagMail> Tags { get; set; }

    public string Introduction { get; set; }

    [Ignore]
    public string Stream { get; set; }

    [Ignore]
    public string Uidl { get; set; }

    [Ignore]
    public string Md5 { get; set; }

    [Ignore]
    public string Address { get; set; }

    [Ignore]
    public string ReplyTo { get; set; }

    [Ignore]
    public DateTime DateReceived { get; set; }

    [Ignore]
    public int Size { get; set; }

    [Ignore]
    public int AttachmentsCount { get; set; }

    [Ignore]
    public bool IsAnswered { get; set; }

    [Ignore]
    public bool IsForwarded { get; set; }

    [Ignore]
    public bool IsFromCrm { get; set; }

    [Ignore]
    public bool IsFromTl { get; set; }

    [Ignore]
    public bool IsTextBodyOnly { get; set; }

    [Ignore]
    public bool HasParseError { get; set; }

    [Ignore]
    public string CalendarUid { get; set; }

    [Ignore]
    public int FolderRestore { get; set; }

    [Ignore]
    public bool Spam { get; set; }

    [Ignore]
    public bool ReadRequestStatus { get; set; }

    [Ignore]
    public string MimeMessageId { get; set; }

    [Ignore]
    public string MimeInReplyTo { get; set; }

    public List<MailAttachment> Attachments { get; set; }
    
    public Document Document { get; set; }
   
    [Ignore]
    public string IndexName
    {
        get => Tables.Mail;
    }

    public override object[] GetKeys() => new object[] { Id };

    public Expression<Func<ISearchItem, object[]>> GetSearchContentFields(SearchSettingsHelper searchSettings)
    {
        if (searchSettings.CanSearchByContent(GetType()))
        {
            return (a) => new[] { Subject, FromText, ToText, Cc, Bcc, Document.Attachment.Content };
        }
        return (a) => new[] { Subject, FromText, ToText, Cc, Bcc };
    }
}

public static class MailMailExtension
{
    public static ModelBuilder AddMailMail(this ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MailMail>(entity =>
        {
            entity.ToTable("mail_mail");

            entity.Ignore(r => r.Document);
            entity.Ignore(r => r.Attachments);
            entity.Ignore(r => r.UserFolders);
            entity.Ignore(r => r.Tags);
            entity.Ignore(r => r.HasAttachments);
            entity.Ignore(r => r.WithCalendar);
            entity.Ignore(r => r.IndexName);

            entity.HasKey(e => e.Id)
                .HasName("PRIMARY");

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .HasColumnType("int(11)")
                .ValueGeneratedOnAdd();

            entity.HasIndex(e => e.LastModifiedOn)
                .HasDatabaseName("time_modified");

            entity.HasIndex(e => new { e.MailboxId, e.MimeMessageId })
                .HasDatabaseName("mime_message_id");

            entity.HasIndex(e => new { e.Md5, e.MailboxId })
                .HasDatabaseName("md5");

            entity.HasIndex(e => new { e.Uidl, e.MailboxId })
                .HasDatabaseName("uidl");

            entity.HasIndex(e => new { e.ChainId, e.MailboxId, e.Folder })
                .HasDatabaseName("chain_index_folders");

            entity.HasIndex(e => new { e.TenantId, e.UserId, e.Folder, e.ChainDate })
                .HasDatabaseName("list_conversations");

            entity.HasIndex(e => new { e.TenantId, e.UserId, e.Folder, e.DateSent })
                .HasDatabaseName("list_messages");

            entity.Property(e => e.MailboxId)
                .HasColumnName("id_mailbox")
                .HasColumnType("int(11)");

            entity.Property(e => e.TenantId)
                .HasColumnName("tenant")
                .HasColumnType("int(11)");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasColumnName("address")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Bcc)
                .HasColumnName("bcc")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.CalendarUid)
                .HasColumnName("calendar_uid")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Cc)
                .HasColumnName("cc")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.ChainDate)
                .HasColumnName("chain_date")
                .HasColumnType("datetime")
                .HasDefaultValueSql("'1975-01-01 00:00:00'");

            entity.Property(e => e.ChainId)
                .HasColumnName("chain_id")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.DateReceived)
                .HasColumnName("date_received")
                .HasColumnType("datetime")
                .HasDefaultValueSql("'1975-01-01 00:00:00'");

            entity.Property(e => e.DateSent)
                .HasColumnName("date_sent")
                .HasColumnType("datetime")
                .HasDefaultValueSql("'1975-01-01 00:00:00'");


            entity.Property(e => e.FromText)
                .HasColumnName("from_text")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasColumnName("id_user")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Introduction)
                .IsRequired()
                .HasColumnName("introduction")
                .HasColumnType("varchar(255)")
                .HasDefaultValueSql("''")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Md5)
            .HasColumnName("md5")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.MimeInReplyTo)
                .HasColumnName("mime_in_reply_to")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.MimeMessageId)
                .HasColumnName("mime_message_id")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.ReplyTo)
                .HasColumnName("reply_to")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Stream)
                .IsRequired()
                .HasColumnName("stream")
                .HasColumnType("varchar(38)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Subject)
                .HasColumnName("subject")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.LastModifiedOn)
                .HasColumnName("time_modified")
                .HasColumnType("timestamp")
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .ValueGeneratedOnAddOrUpdate();

            entity.Property(e => e.ToText)
                .HasColumnName("to_text")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Uidl)
                .HasColumnName("uidl")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasMany(m => m.Attachments)
                .WithOne(a => a.Mail)
                .HasForeignKey(a => a.IdMail);

            entity.Property(e => e.Importance)
                .HasColumnName("importance");

            entity.Property(e => e.HasParseError)
                .HasColumnName("has_parse_error");

            entity.Property(e => e.IsRemoved)
                .HasColumnName("is_removed");

            entity.Property(e => e.Size)
                .HasColumnName("size")
                .HasColumnType("int(11)");

            
            entity.Property(e => e.IsForwarded)
                .HasColumnName("is_forwarded")
                .HasColumnType("int(11)");
            
            entity.Property(e => e.IsAnswered)
                .HasColumnName("is_answered")
                .HasColumnType("int(11)");
            
            entity.Property(e => e.Unread)
                .HasColumnName("unread")
                .HasColumnType("int(11)");
            
            entity.Property(e => e.IsFromCrm)
                .HasColumnName("is_from_crm")
                .HasColumnType("int(11)");
            
            entity.Property(e => e.IsFromTl)
                .HasColumnName("is_from_tl")
                .HasColumnType("int(11)");
            
            entity.Property(e => e.IsTextBodyOnly)
                .HasColumnName("is_text_body_only")
                .HasColumnType("int(11)");

            entity.Property(e => e.AttachmentsCount)
                .HasColumnName("attachments_count")
                .HasColumnType("int(11)");

            entity.Property(e => e.Folder)
                .HasColumnName("folder")
                .HasColumnType("int(11)")
                .HasDefaultValueSql("'1'"); ;
            
            entity.Property(e => e.FolderRestore)
                .HasColumnName("folder_restore")
                .HasColumnType("int(11)")
                .HasDefaultValueSql("'1'"); ;
            
            entity.Property(e => e.Spam)
                .HasColumnName("spam")
                .HasColumnType("int(11)");

            entity.Property(e => e.ReadRequestStatus)
                .HasColumnName("read_request_status")
                .HasColumnType("tinyint(1) unsigned");
        });

        return modelBuilder;
    }
}
