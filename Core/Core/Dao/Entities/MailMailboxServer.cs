// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
namespace ASC.Mail.Core.Dao.Entities;

public partial class MailMailboxServer : BaseEntity
{
    public int Id { get; set; }
    public int IdProvider { get; set; }
    public string Type { get; set; }
    public string Hostname { get; set; }
    public int Port { get; set; }
    public string SocketType { get; set; }
    public string Username { get; set; }
    public string Authentication { get; set; }
    public bool IsUserData { get; set; }

    public override object[] GetKeys() => new object[] { Id };
}

public static class MailMailboxServerExtension
{
    public static ModelBuilder AddMailMailboxServer(this ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MailMailboxServer>(entity =>
        {
            entity.ToTable("mail_mailbox_server");

            entity.HasKey(e => e.Id)
                .HasName("PRIMARY");

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .HasColumnType("int(11)")
                .ValueGeneratedOnAdd();

            entity.HasIndex(e => e.IdProvider)
                .HasDatabaseName("id_provider");

            entity.Property(e => e.IdProvider)
                .HasColumnName("id_provider")
                .HasColumnType("int(11)");

            entity.Property(e => e.Port)
                .HasColumnName("port")
                .HasColumnType("int(11)");

            entity.Property(e => e.Authentication)
                .HasColumnName("authentication")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Hostname)
                .IsRequired()
                .HasColumnName("hostname")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.SocketType)
                .IsRequired()
                .HasColumnName("socket_type")
                .HasColumnType("enum('plain','SSL','STARTTLS')")
                .HasDefaultValueSql("'plain'")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Type)
                .IsRequired()
                .HasColumnName("type")
                .HasColumnType("enum('pop3','imap','smtp')")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Username)
                .HasColumnName("username")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.IsUserData)
                .HasColumnName("is_user_data")
                .HasColumnType("tinyint(4)");
        });

        modelBuilder.Entity<MailMailboxServer>().HasData(new MailMailboxServer [] {
            new MailMailboxServer 
            { 
                Id = 663, IdProvider = 69, Type = "imap", Hostname = "imap.googlemail.com", Port = 993, SocketType = "SSL", Username = "%EMAILADDRESS%", IsUserData = false 
            } ,
            new MailMailboxServer
            {
                Id = 664, IdProvider = 69, Type = "pop3", Hostname = "pop.googlemail.com", Port = 995, SocketType = "SSL", Username = "recent:%EMAILADDRESS%", IsUserData = false
            } ,
            new MailMailboxServer
            {
                Id = 665, IdProvider = 69, Type = "smtp", Hostname = "smpt.googlemail.com", Port = 465, SocketType = "SSL", Username = "%EMAILADDRESS%", IsUserData = false
            }
        });

        return modelBuilder;
    }
}
