// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
namespace ASC.Mail.Core.Dao.Entities;

public partial class MailMailbox : BaseEntity
{        
    public uint Id { get; set; }
    public int Tenant { get; set; }
    public string IdUser { get; set; }
    public string Address { get; set; }
    public string Name { get; set; }
    public bool Enabled { get; set; }
    public bool IsRemoved { get; set; }

    [ConcurrencyCheck]
    public bool IsProcessed { get; set; }
    public bool IsServerMailbox { get; set; }
    public bool Imap { get; set; }
    public bool UserOnline { get; set; }
    public bool IsDefault { get; set; }
    public int MsgCountLast { get; set; }
    public long SizeLast { get; set; }
    public int IdSmtpServer { get; set; }
    public int IdInServer { get; set; }
    public int LoginDelay { get; set; }
    public bool QuotaError { get; set; }
    public string ImapIntervals { get; set; }
    public DateTime BeginDate { get; set; }
    public string EmailInFolder { get; set; }
    public string Pop3Password { get; set; }
    public string SmtpPassword { get; set; }
    public int TokenType { get; set; }
    public string Token { get; set; }
    public DateTime? DateChecked { get; set; }
    public DateTime? DateUserChecked { get; set; }
    public DateTime DateLoginDelayExpires { get; set; }
    public DateTime? DateAuthError { get; set; }
    public DateTime? DateCreated { get; set; }
    public DateTime DateModified { get; set; }

    public override object[] GetKeys() => new object[] { Id };
}

public static class MailMailboxExtension
{
    public static ModelBuilderWrapper AddMailMailbox(this ModelBuilderWrapper modelBuilder)
    {
        modelBuilder
            .Add(MySqlAddMailMailbox, Provider.MySql);

        return modelBuilder;
    }

    public static void MySqlAddMailMailbox(this ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MailMailbox>(entity =>
        {
            entity.ToTable("mail_mailbox");

            entity.HasKey(e => e.Id)
                .HasName("PRIMARY");

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .HasColumnType("int(11) unsigned")
                .ValueGeneratedOnAdd();

            entity.HasIndex(e => e.Address)
                .HasDatabaseName("address_index");

            entity.HasIndex(e => e.IdInServer)
                .HasDatabaseName("main_mailbox_id_in_server_mail_mailbox_server_id");

            entity.HasIndex(e => e.IdSmtpServer)
                .HasDatabaseName("main_mailbox_id_smtp_server_mail_mailbox_server_id");

            entity.HasIndex(e => new { e.DateChecked, e.DateLoginDelayExpires })
                .HasDatabaseName("date_login_delay_expires");

            entity.HasIndex(e => new { e.Tenant, e.IdUser })
                .HasDatabaseName("user_id_index");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasColumnName("address")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Tenant)
                .HasColumnName("tenant")
                .HasColumnType("int(11)");

            entity.Property(e => e.MsgCountLast)
                .HasColumnName("msg_count_last")
                .HasColumnType("int(11)");

            entity.Property(e => e.SizeLast)
                .HasColumnName("size_last")
                .HasColumnType("int(11)");

            entity.Property(e => e.IdSmtpServer)
                .HasColumnName("id_smtp_server")
                .HasColumnType("int(11)");

            entity.Property(e => e.IdInServer)
                .HasColumnName("id_in_server")
                .HasColumnType("int(11)");

            entity.Property(e => e.TokenType)
                .HasColumnName("token_type")
                .HasColumnType("tinyint(4)");

            entity.Property(e => e.BeginDate)
                .HasColumnName("begin_date")
                .HasColumnType("timestamp")
                .HasDefaultValueSql("'1975-01-01 00:00:00'");

            entity.Property(e => e.DateChecked)
                .HasColumnName("date_checked")
                .HasColumnType("datetime");

            entity.Property(e => e.DateUserChecked)
                .HasColumnName("date_user_checked")
                .HasColumnType("datetime");

            entity.Property(e => e.DateAuthError)
                .HasColumnName("date_auth_error")
                .HasColumnType("datetime");

            entity.Property(e => e.DateCreated)
                .HasColumnName("date_created")
                .HasColumnType("datetime");

            entity.Property(e => e.DateLoginDelayExpires)
                .HasColumnName("date_login_delay_expires")
                .HasColumnType("datetime")
                .HasDefaultValueSql("'1975-01-01 00:00:00'");

            entity.Property(e => e.DateModified)
                .HasColumnName("date_modified")
                .HasColumnType("timestamp")
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .ValueGeneratedOnAddOrUpdate();

            entity.Property(e => e.EmailInFolder)
                .HasColumnName("email_in_folder")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Enabled)
                .HasColumnName("enabled")
                .HasColumnType("tinyint(1) unsigned")
                .HasDefaultValueSql("'1'");

            entity.Property(e => e.QuotaError)
                .HasColumnName("quota_error")
                .HasColumnType("tinyint(1)");

            entity.Property(e => e.IsServerMailbox)
                .HasColumnName("is_server_mailbox")
                .HasColumnType("tinyint(1) unsigned");

            entity.Property(e => e.IsProcessed)
                .HasColumnName("is_processed")
                .HasColumnType("tinyint(1) unsigned");

            entity.Property(e => e.Imap)
                .HasColumnName("imap")
                .HasColumnType("tinyint(1) unsigned");

            entity.Property(e => e.UserOnline)
                .HasColumnName("user_online")
                .HasColumnType("tinyint(1) unsigned");

            entity.Property(e => e.IsDefault)
                .HasColumnName("is_default")
                .HasColumnType("tinyint(1) unsigned");


            entity.Property(e => e.IsRemoved)
                .HasColumnName("is_removed")
                .HasColumnType("tinyint(1) unsigned");

            entity.Property(e => e.IdUser)
                .IsRequired()
                .HasColumnName("id_user")
                .HasColumnType("varchar(38)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.ImapIntervals)
                .HasColumnName("imap_intervals")
                .HasColumnType("mediumtext")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.LoginDelay)
                .HasColumnName("login_delay")
                .HasColumnType("int(11) unsigned")
                .HasDefaultValueSql("'30'");

            entity.Property(e => e.Name)
                .HasColumnName("name")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Pop3Password)
                .HasColumnName("pop3_password")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.SmtpPassword)
                .HasColumnName("smtp_password")
                .HasColumnType("varchar(255)")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Token)
                .HasColumnName("token")
                .HasColumnType("text")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");
        });
    }
}

public class MailMailboxNames
{
    public const string DateChecked = "date_checked";
    public const string DateLoginDelayExpires = "date_login_delay_expires";
    public const string DateUserChecked = "date_user_checked";
}
