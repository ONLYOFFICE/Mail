///*
// *
// * (c) Copyright Ascensio System Limited 2010-2020
// *
// * This program is freeware. You can redistribute it and/or modify it under the terms of the GNU 
// * General Public License (GPL) version 3 as published by the Free Software Foundation (https://www.gnu.org/copyleft/gpl.html). 
// * In accordance with Section 7(a) of the GNU GPL its Section 15 shall be amended to the effect that 
// * Ascensio System SIA expressly excludes the warranty of non-infringement of any third-party rights.
// *
// * THIS PROGRAM IS DISTRIBUTED WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR
// * FITNESS FOR A PARTICULAR PURPOSE. For more details, see GNU GPL at https://www.gnu.org/copyleft/gpl.html
// *
// * You can contact Ascensio System SIA by email at sales@onlyoffice.com
// *
// * The interactive user interfaces in modified source and object code versions of ONLYOFFICE must display 
// * Appropriate Legal Notices, as required under Section 5 of the GNU GPL version 3.
// *
// * Pursuant to Section 7 ยง 3(b) of the GNU GPL you must retain the original ONLYOFFICE logo which contains 
// * relevant author attributions when distributing the software. If the display of the logo in its graphic 
// * form is not reasonably feasible for technical reasons, you must include the words "Powered by ONLYOFFICE" 
// * in every copy of the program you distribute. 
// * Pursuant to Section 7 ยง 3(e) we decline to grant you any rights under trademark law for use of our trademarks.
// *
//*/


//using System;
//using System.IO;
//using ASC.Core;
//using ASC.Core.Tenants;
//using ASC.Mail.Clients;
//using ASC.Mail.Models;
//using ASC.Mail.Enums;
//using ASC.Mail.Utils;
//using NUnit.Framework;

//namespace ASC.Mail.Aggregator.Tests.Common.Utils
//{
//    [TestFixture]
//    internal class MailUtilsTests
//    {
//        [Test]
//        public void CreateMessageIdTest()
//        {
//            var mimeMessageId = MailUtil.CreateMessageId();

//            Assert.IsNotNull(mimeMessageId);
//            Assert.IsNotEmpty(mimeMessageId);
//        }

//        [Test]
//        public void CreateMessageIdOfDomainWithPortTest()
//        {
//            var tenant = new Tenant
//            {
//                Name = "test_name",
//                TenantAlias = "test_alias:5552"
//            };

//            tenant = CoreContext.TenantManager.SaveTenant(tenant);

//            Assert.IsNotNull(tenant);

//            CoreContext.TenantManager.SetCurrentTenant(tenant);

//            var mimeMessageId = MailUtil.CreateMessageId();

//            Assert.IsNotNull(mimeMessageId);
//            Assert.IsNotEmpty(mimeMessageId);
//            Assert.True(mimeMessageId.IndexOf(":", StringComparison.Ordinal) == -1);

//            CoreContext.TenantManager.RemoveTenant(tenant.TenantId);
//        }

//        [Test]
//        public void DecryptPwd()
//        {
//            const string pwd = "PwdSample123";

//            var encrypted = MailUtil.EncryptPassword(pwd);

//            var decrypted = MailUtil.DecryptPassword(encrypted);

//            Assert.AreEqual(pwd, decrypted);
//        }

//        [Test]
//        public void IsMessageAutoGeneratedTest()
//        {
//            MailMessageData message;

//            var path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\bad_encoding.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            var isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(false, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\yandex_autoreply_sample.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(true, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\twitter_sample.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(true, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\onlyoffice_sample.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(true, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\medium_sample.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(true, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\mxtoolbox_sample.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(true, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\Delivery Status Notification (Failure).eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(true, isMassSending);

//            path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\Data\message_mailru.eml");

//            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read))
//            {
//                var mimeMessage = MailClient.ParseMimeMessage(fs);

//                message = mimeMessage.ConvertToMailMessage(new MailFolder(FolderType.Inbox, ""), true, "sample-chain-id",
//                    DateTime.UtcNow, MailUtil.CreateStreamId(), -1);
//            }

//            isMassSending = MailUtil.IsMessageAutoGenerated(message);

//            Assert.AreEqual(false, isMassSending);
//        }
//    }
//}
